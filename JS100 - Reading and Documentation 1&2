Reading Documentation 1

1. What is an excellent destination when looking for JavaScript documentation?

The JavaScript pages on MDN are a valuable resource that you should reference frequently as you learn JavaScript. They provide both tutorials and a reference of JavaScript's built-in objects and their properties and methods, operators, and more. You can also find information about browser compatibility and specifications.

2. Find out whether JavaScript has a method to lowercase a string, for example converting 'Aloha, World!' into 'aloha, world!.

'Aloha, World!'.toLowerCase(); // 'aloha, world!'

3. Is there a method to capitalize a string, for example turning 'mountain' into 'Mountain'?

There is no built-in method for capitalizing a string. If we wanted to have such a method, we would have to implement it ourselves.

4. Locate the documentation for the Array built-in object on MDN.

How can we access the element 'and' in the array ['fish', 'and', 'chips']?

['fish', 'and', 'chips'][1];

5. What happens if we take the array ['fish', 'and', 'chips'] and try to access the element at index position 10? Try this in your JavaScript console.

Attempting to access an element at an index that is out of the bounds of the array will return undefined.

6. What are the return values of the statements on lines 3 to 5? Refer to the MDN documentation about the Array object for help.

let trees = ['birch', 'pine', 'sequoia', 'palm tree'];

trees[trees.length - 1];
trees.pop();
trees[trees.length - 1];

let trees = ['birch', 'pine', 'sequoia', 'palm tree'];

trees[trees.length - 1]; // 'palm tree'
trees.pop();              // 'palm tree'
trees[trees.length - 1]; // 'sequoia'

7. Look up the MDN documentation for the typeof operator. What is its return value? Determine what the following statements will return:

typeof 23.5;
typeof 'Call me Ishmael.';
typeof false;
typeof 0;
typeof null;
typeof undefined;

typeof 23.5;               // 'number'
typeof 'Call me Ishmael.'; // 'string'
typeof false;              // 'boolean'
typeof 0;                  // 'number'
typeof null;               // 'object'
typeof undefined;          // 'undefined'

8. What will the following statements return?

typeof tweet;
typeof words;
typeof isValid;

typeof tweet;   // 'string'
typeof words;   // 'object'
typeof isValid; // 'boolean'

9. What will the following statements evaluate to?

tweet.split(' ');
tweet.split(' ').reverse();
tweet.split(' ').reverse().join(' ');

tweet.split(' ');
// ["Starting", "to", "get", "the", "hang", "of", "it...", "#javascript", "#launchschool"]

tweet.split(' ').reverse();
// ["#launchschool", "#javascript", "it...", "of", "hang", "the", "get", "to", "Starting"]

tweet.split(' ').reverse().join(' ');
// '#launchschool #javascript it... of hang the get to Starting'

10. In your JavaScript console, execute the following two lines of code to check whether their return values differ and if so, how. Take a look at the MDN documentation on equality comparisons to read about how == and === differ.

'8' == 8;
'8' === 8;

'8' == 8;  // true
'8' === 8; // false

Reading Documentation 2

1. In the following code snippet, find all violations of the style guide. Rewrite it so that it conforms with the guide.

let ice_cream_taste = 'chocolate'
let ice_cream_density = 10

while(ice_cream_density > 0)
{
    console.log('Drip...');
    ice_cream_density -= 1;
}

console.log('The '+ ice_cream_taste +' ice cream melted.');

let iceCreamTaste = 'chocolate';
let iceCreamDensity = 10;

while (iceCreamDensity > 0) {
  console.log('Drip...');
  iceCreamDensity -= 1;
}

console.log('The ' + iceCreamTaste + ' ice cream melted.');

Use camelCase for variable names.
End all statements with a semicolon.
Indent lines with two spaces.
Use spaces between keywords (like while) and opening parentheses, as well as between closing parentheses and opening curly brackets.
Put the opening curly brackets of the while block on the same line as the while statement.
Put spaces before and after operators like +.

2. Without looking into your notes, try to remember which primitive data types are defined in JavaScript. Then find this information on MDN.

There are six primitive data types:

Number
Boolean
String
Symbol
Null
Undefined

3. Using the documentation, determine how we can find the largest numeric value that can be represented in JavaScript. Write a line of code that returns this value.

Number.MAX_VALUE; // 1.7976931348623157e+308

4. Find the MDN documentation on operator precedence, and use it to find out which result the expression 4 * 5 + 3 ** 2 / 10 evaluates to.

20.9

5. Find out what Date.now() returns.

console.log(Date.now()); // 1536562500455

6. let today = new Date();

today.getYear();
today.getFullYear();
What is the difference between the two methods and which one should you use?

Date.prototype.getYear() returns a number representing the year of the date on which it is invoked, minus 1900. For example, if the date is sometime in 2019, getYear() will return 119.

Date.prototype.getFullYear() returns a number representing the year of the date on which it is invoked. For example, if the date is sometime in 2019, getFullYear() will return 2019.

As the documentation notes, getYear() is deprecated and you should avoid using it. It is being replaced with getFullYear(), which returns a four-digit number representing the year, as expected.

7. How many arguments does the Array.prototype.join() method expect? What happens if you call it with less or more arguments?

The array method join() concatenates all elements of an array into a string. It expects a single, optional argument: a string that will be used as separator. If the argument is omitted, the separator defaults to ','. Any excess arguments passed to the method upon invocation are ignored.

8. Find out how we can join two or more strings together.

Both the String.prototype.concat() method and the + operator concatenate two or more strings, returning a new string.

9. The below code raises a SyntaxError. If you run the code, you'll see the following error message:

SyntaxError: Unexpected token &&

10. TypeError: tweet.length is not a function

The syntax section of the MDN page on length demonstrates that length is called without parentheses. This is because it is a string property, not a string method.
