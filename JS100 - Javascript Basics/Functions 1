1. 	Sum

Examine the example function invocation below. Write the function sum, such that it accepts two arguments and returns the sum of its arguments. You may assume that the function arguments will always be numbers.

function sum(num1, num2) {
  return num1 + num2;
}

2. Log Quote

Write a function that logs Brendan Eich's quote 'Always bet on JavaScript.' to the console. What is the return value of the function?

function brendanEichQuote() {
  console.log('Always bet on JavaScript.');
}

Since the function has no return statement, the return value of our function is undefined.

3. Cite the Author

Let's generalize the function from the previous exercise a bit. Implement a function cite that takes two string arguments: the author of the quote and what they said. It then logs the quote to the console, as in the following example.

function cite(author, quote) {
  console.log(author + ' said: "' + quote + '"');
}

4. Squared Number 

Write a function that accepts a single argument, a number, and returns the result of multiplying its argument by an exponent of 2 (also known as squaring the number).

function squaredNumber(num) {
  return num ** 2;
}

5. Display Division

function multiplesOfThree() {
  let divisor = 1;

  for (let dividend = 3; dividend <= 30; dividend += 3) {
    console.log(dividend + ' / ' + divisor + ' = 3');
    divisor += 1;
  }
}

multiplesOfThree;

There will be no output, because the function multiplesOfThree is not invoked.

To invoke the function, we should append parentheses to the function name on line 10, like so:

multiplesOfThree();

// logs:
// 3 / 1 = 3
// 6 / 2 = 3
// 9 / 3 = 3
// ...

6. Three-way comparison

function compareByLength(str1, str2) {
  if (str1.length < str2.length) {
    return -1;
  } else if (str1.length > str2.length) {
    return 1;
  } else {
    return 0;
  }
}

7. Transformation

Use JavaScript's string methods on the string 'Captain Ruby' to produce the string 'Captain JavaScript'.

'Captain Ruby'.replace('Ruby', 'JavaScript');

8. Internationalization 1

Write a function that takes an ISO 639-1 language code and returns a greeting in that language. You can take the examples below or add whatever languages you like.

 function greet(languageCode) {
  switch (languageCode) {
    case 'en': return 'Hi!';
    case 'fr': return 'Salut!';
    case 'pt': return 'Ol√°!';
    case 'de': return 'Hallo!';
    case 'sv': return 'Hej!';
    case 'af': return 'Haai!';
  }
}

// Example:
console.log(greet('sv'));

9. Locale Part 1

Write a function that extracts the language code from a locale. A locale is a combination of a language code, a region, and usually also a character set, e.g en_US.UTF-8.

function extractLanguage(locale) {
  return locale.split('_')[0];
}

// Examples:
console.log(extractLanguage('en_US.UTF-8'));
console.log(extractLanguage('en_GB.UTF-8'));
console.log(extractLanguage('ko_KR.UTF-16'));

10. Locale Part 2

Similar to the previous exercise, now write a function that extracts the region code from a locale. For example:

function extractRegion(locale) {
  return locale.split('.')[0]
               .split('_')[1];
}

// Examples:
console.log(extractRegion('en_US.UTF-8'));
console.log(extractRegion('en_GB.UTF-8'));
console.log(extractRegion('ko_KR.UTF-16'));

11. Internationalization 2

Building on your solutions from the previous exercises, write a function localGreet that takes a locale as input, and returns a greeting. The locale allows us to greet people from different countries differently also when they share the language, for example:

function localGreet(locale) {
  let language = extractLanguage(locale);
  let region = extractRegion(locale);

  switch (region) {
    case 'US': return 'Hey!';
    case 'GB': return 'Hello!';
    case 'AU': return 'Howdy!';
    default: return greet(language);
  }
}
